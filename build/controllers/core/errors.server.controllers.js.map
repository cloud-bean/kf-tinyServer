{"version":3,"sources":["../../../src/controllers/core/errors.server.controllers.js"],"names":["getUniqueErrorMessage","err","output","begin","errmsg","lastIndexOf","fieldName","substring","charAt","toUpperCase","slice","ex","getErrorMessage","message","code","errName","errors","module","exports"],"mappings":"AAAA;;;AAGC,SAASA,qBAAT,CAA+BC,GAA/B,EAAoC;AACnC,MAAIC,MAAJ;AACA,MAAI;AACF,QAAIC,QAAQ,CAAZ;AACA,QAAIF,IAAIG,MAAJ,CAAWC,WAAX,CAAuB,IAAvB,MAAiC,CAAC,CAAtC,EAAyC;AACvC;AACA;AACAF,cAAQF,IAAIG,MAAJ,CAAWC,WAAX,CAAuB,IAAvB,IAA+B,CAAvC;AACD,KAJD,MAIO;AACL;AACA;AACAF,cAAQF,IAAIG,MAAJ,CAAWC,WAAX,CAAuB,SAAvB,IAAoC,CAA5C;AACD;AACD,UAAMC,YAAYL,IAAIG,MAAJ,CAAWG,SAAX,CAAqBJ,KAArB,EAA4BF,IAAIG,MAAJ,CAAWC,WAAX,CAAuB,IAAvB,CAA5B,CAAlB;AACAH,aAAU,GAAEI,UAAUE,MAAV,CAAiB,CAAjB,EAAoBC,WAApB,EAAkC,IAAGH,UAAUI,KAAV,CAAgB,CAAhB,CAAmB,kBAApE;AACD,GAbD,CAaE,OAAOC,EAAP,EAAW;AACXT,aAAS,6BAAT;AACD;;AAED,SAAOA,MAAP;AACD;;AAED;;;AAGC,SAASU,eAAT,CAAyBX,GAAzB,EAA8B;AAC7B,MAAIY,UAAU,EAAd;AACA,MAAIZ,IAAIa,IAAR,EAAc;AACZ,YAAQb,IAAIa,IAAZ;AACE,WAAK,KAAL;AACA,WAAK,KAAL;AACED,kBAAUb,sBAAsBC,GAAtB,CAAV;AACA;AACF;AACEY,kBAAU,sBAAV;AANJ;AAQD,GATD,MASO;AACL,SAAK,MAAME,OAAX,IAAsBd,IAAIe,MAA1B,EAAkC;AAChC,UAAIf,IAAIe,MAAJ,CAAWD,OAAX,EAAoBF,OAAxB,EAAiC;AAC/BA,kBAAUZ,IAAIe,MAAJ,CAAWD,OAAX,EAAoBF,OAA9B;AACD;AACF;AACF;AACD,SAAOA,OAAP;AACD;;AAEDI,OAAOC,OAAP,GAAiB;AACflB,uBADe;AAEfY;AAFe,CAAjB","file":"errors.server.controllers.js","sourcesContent":["/**\n * Get unique error field name\n */\n function getUniqueErrorMessage(err) {\n  let output;\n  try {\n    let begin = 0;\n    if (err.errmsg.lastIndexOf('.$') !== -1) {\n      // support mongodb <= 3.0 (default: MMapv1 engine)\n      // \"errmsg\" : \"E11000 duplicate key error index: mean-dev.users.$email_1 dup key: { : \\\"test@user.com\\\" }\"\n      begin = err.errmsg.lastIndexOf('.$') + 2;\n    } else {\n      // support mongodb >= 3.2 (default: WiredTiger engine)\n      // \"errmsg\" : \"E11000 duplicate key error collection: mean-dev.users index: email_1 dup key: { : \\\"test@user.com\\\" }\"\n      begin = err.errmsg.lastIndexOf('index: ') + 7;\n    }\n    const fieldName = err.errmsg.substring(begin, err.errmsg.lastIndexOf('_1'));\n    output = `${fieldName.charAt(0).toUpperCase()} ${fieldName.slice(1)}  already exists`;\n  } catch (ex) {\n    output = 'Unique field already exists';\n  }\n\n  return output;\n}\n\n/**\n * Get the error message from error object\n */\n function getErrorMessage(err) {\n  let message = '';\n  if (err.code) {\n    switch (err.code) {\n      case 11000:\n      case 11001:\n        message = getUniqueErrorMessage(err);\n        break;\n      default:\n        message = 'Something went wrong';\n    }\n  } else {\n    for (const errName in err.errors) {\n      if (err.errors[errName].message) {\n        message = err.errors[errName].message;\n      }\n    }\n  }\n  return message;\n}\n\nmodule.exports = {\n  getUniqueErrorMessage,\n  getErrorMessage,\n};\n"]}